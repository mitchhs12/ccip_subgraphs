// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MessageExecuted extends ethereum.Event {
  get params(): MessageExecuted__Params {
    return new MessageExecuted__Params(this);
  }
}

export class MessageExecuted__Params {
  _event: MessageExecuted;

  constructor(event: MessageExecuted) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get offRamp(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get calldataHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class OffRampAdded extends ethereum.Event {
  get params(): OffRampAdded__Params {
    return new OffRampAdded__Params(this);
  }
}

export class OffRampAdded__Params {
  _event: OffRampAdded;

  constructor(event: OffRampAdded) {
    this._event = event;
  }

  get sourceChainSelector(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get offRamp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OffRampRemoved extends ethereum.Event {
  get params(): OffRampRemoved__Params {
    return new OffRampRemoved__Params(this);
  }
}

export class OffRampRemoved__Params {
  _event: OffRampRemoved;

  constructor(event: OffRampRemoved) {
    this._event = event;
  }

  get sourceChainSelector(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get offRamp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OnRampSet extends ethereum.Event {
  get params(): OnRampSet__Params {
    return new OnRampSet__Params(this);
  }
}

export class OnRampSet__Params {
  _event: OnRampSet;

  constructor(event: OnRampSet) {
    this._event = event;
  }

  get destChainSelector(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get onRamp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Router__getFeeInputMessageStruct extends ethereum.Tuple {
  get receiver(): Bytes {
    return this[0].toBytes();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }

  get tokenAmounts(): Array<Router__getFeeInputMessageTokenAmountsStruct> {
    return this[2].toTupleArray<Router__getFeeInputMessageTokenAmountsStruct>();
  }

  get feeToken(): Address {
    return this[3].toAddress();
  }

  get extraArgs(): Bytes {
    return this[4].toBytes();
  }
}

export class Router__getFeeInputMessageTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Router__getOffRampsResultValue0Struct extends ethereum.Tuple {
  get sourceChainSelector(): BigInt {
    return this[0].toBigInt();
  }

  get offRamp(): Address {
    return this[1].toAddress();
  }
}

export class Router__routeMessageResult {
  value0: boolean;
  value1: Bytes;
  value2: BigInt;

  constructor(value0: boolean, value1: Bytes, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getSuccess(): boolean {
    return this.value0;
  }

  getRetData(): Bytes {
    return this.value1;
  }

  getGasUsed(): BigInt {
    return this.value2;
  }
}

export class Router__routeMessageInputMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<Router__routeMessageInputMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<Router__routeMessageInputMessageDestTokenAmountsStruct>();
  }
}

export class Router__routeMessageInputMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Router extends ethereum.SmartContract {
  static bind(address: Address): Router {
    return new Router("Router", address);
  }

  MAX_RET_BYTES(): i32 {
    let result = super.call("MAX_RET_BYTES", "MAX_RET_BYTES():(uint16)", []);

    return result[0].toI32();
  }

  try_MAX_RET_BYTES(): ethereum.CallResult<i32> {
    let result = super.tryCall("MAX_RET_BYTES", "MAX_RET_BYTES():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getArmProxy(): Address {
    let result = super.call("getArmProxy", "getArmProxy():(address)", []);

    return result[0].toAddress();
  }

  try_getArmProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall("getArmProxy", "getArmProxy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFee(
    destinationChainSelector: BigInt,
    message: Router__getFeeInputMessageStruct,
  ): BigInt {
    let result = super.call(
      "getFee",
      "getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainSelector),
        ethereum.Value.fromTuple(message),
      ],
    );

    return result[0].toBigInt();
  }

  try_getFee(
    destinationChainSelector: BigInt,
    message: Router__getFeeInputMessageStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFee",
      "getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainSelector),
        ethereum.Value.fromTuple(message),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOffRamps(): Array<Router__getOffRampsResultValue0Struct> {
    let result = super.call(
      "getOffRamps",
      "getOffRamps():((uint64,address)[])",
      [],
    );

    return result[0].toTupleArray<Router__getOffRampsResultValue0Struct>();
  }

  try_getOffRamps(): ethereum.CallResult<
    Array<Router__getOffRampsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getOffRamps",
      "getOffRamps():((uint64,address)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Router__getOffRampsResultValue0Struct>(),
    );
  }

  getOnRamp(destChainSelector: BigInt): Address {
    let result = super.call("getOnRamp", "getOnRamp(uint64):(address)", [
      ethereum.Value.fromUnsignedBigInt(destChainSelector),
    ]);

    return result[0].toAddress();
  }

  try_getOnRamp(destChainSelector: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getOnRamp", "getOnRamp(uint64):(address)", [
      ethereum.Value.fromUnsignedBigInt(destChainSelector),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSupportedTokens(chainSelector: BigInt): Array<Address> {
    let result = super.call(
      "getSupportedTokens",
      "getSupportedTokens(uint64):(address[])",
      [ethereum.Value.fromUnsignedBigInt(chainSelector)],
    );

    return result[0].toAddressArray();
  }

  try_getSupportedTokens(
    chainSelector: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSupportedTokens",
      "getSupportedTokens(uint64):(address[])",
      [ethereum.Value.fromUnsignedBigInt(chainSelector)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWrappedNative(): Address {
    let result = super.call(
      "getWrappedNative",
      "getWrappedNative():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getWrappedNative(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWrappedNative",
      "getWrappedNative():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isChainSupported(chainSelector: BigInt): boolean {
    let result = super.call(
      "isChainSupported",
      "isChainSupported(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(chainSelector)],
    );

    return result[0].toBoolean();
  }

  try_isChainSupported(chainSelector: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isChainSupported",
      "isChainSupported(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(chainSelector)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOffRamp(sourceChainSelector: BigInt, offRamp: Address): boolean {
    let result = super.call("isOffRamp", "isOffRamp(uint64,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(sourceChainSelector),
      ethereum.Value.fromAddress(offRamp),
    ]);

    return result[0].toBoolean();
  }

  try_isOffRamp(
    sourceChainSelector: BigInt,
    offRamp: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOffRamp",
      "isOffRamp(uint64,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(sourceChainSelector),
        ethereum.Value.fromAddress(offRamp),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  routeMessage(
    message: Router__routeMessageInputMessageStruct,
    gasForCallExactCheck: i32,
    gasLimit: BigInt,
    receiver: Address,
  ): Router__routeMessageResult {
    let result = super.call(
      "routeMessage",
      "routeMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]),uint16,uint256,address):(bool,bytes,uint256)",
      [
        ethereum.Value.fromTuple(message),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(gasForCallExactCheck)),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return new Router__routeMessageResult(
      result[0].toBoolean(),
      result[1].toBytes(),
      result[2].toBigInt(),
    );
  }

  try_routeMessage(
    message: Router__routeMessageInputMessageStruct,
    gasForCallExactCheck: i32,
    gasLimit: BigInt,
    receiver: Address,
  ): ethereum.CallResult<Router__routeMessageResult> {
    let result = super.tryCall(
      "routeMessage",
      "routeMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]),uint16,uint256,address):(bool,bytes,uint256)",
      [
        ethereum.Value.fromTuple(message),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(gasForCallExactCheck)),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Router__routeMessageResult(
        value[0].toBoolean(),
        value[1].toBytes(),
        value[2].toBigInt(),
      ),
    );
  }

  typeAndVersion(): string {
    let result = super.call("typeAndVersion", "typeAndVersion():(string)", []);

    return result[0].toString();
  }

  try_typeAndVersion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "typeAndVersion",
      "typeAndVersion():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get wrappedNative(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get armProxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class ApplyRampUpdatesCall extends ethereum.Call {
  get inputs(): ApplyRampUpdatesCall__Inputs {
    return new ApplyRampUpdatesCall__Inputs(this);
  }

  get outputs(): ApplyRampUpdatesCall__Outputs {
    return new ApplyRampUpdatesCall__Outputs(this);
  }
}

export class ApplyRampUpdatesCall__Inputs {
  _call: ApplyRampUpdatesCall;

  constructor(call: ApplyRampUpdatesCall) {
    this._call = call;
  }

  get onRampUpdates(): Array<ApplyRampUpdatesCallOnRampUpdatesStruct> {
    return this._call.inputValues[0].value.toTupleArray<ApplyRampUpdatesCallOnRampUpdatesStruct>();
  }

  get offRampRemoves(): Array<ApplyRampUpdatesCallOffRampRemovesStruct> {
    return this._call.inputValues[1].value.toTupleArray<ApplyRampUpdatesCallOffRampRemovesStruct>();
  }

  get offRampAdds(): Array<ApplyRampUpdatesCallOffRampAddsStruct> {
    return this._call.inputValues[2].value.toTupleArray<ApplyRampUpdatesCallOffRampAddsStruct>();
  }
}

export class ApplyRampUpdatesCall__Outputs {
  _call: ApplyRampUpdatesCall;

  constructor(call: ApplyRampUpdatesCall) {
    this._call = call;
  }
}

export class ApplyRampUpdatesCallOnRampUpdatesStruct extends ethereum.Tuple {
  get destChainSelector(): BigInt {
    return this[0].toBigInt();
  }

  get onRamp(): Address {
    return this[1].toAddress();
  }
}

export class ApplyRampUpdatesCallOffRampRemovesStruct extends ethereum.Tuple {
  get sourceChainSelector(): BigInt {
    return this[0].toBigInt();
  }

  get offRamp(): Address {
    return this[1].toAddress();
  }
}

export class ApplyRampUpdatesCallOffRampAddsStruct extends ethereum.Tuple {
  get sourceChainSelector(): BigInt {
    return this[0].toBigInt();
  }

  get offRamp(): Address {
    return this[1].toAddress();
  }
}

export class CcipSendCall extends ethereum.Call {
  get inputs(): CcipSendCall__Inputs {
    return new CcipSendCall__Inputs(this);
  }

  get outputs(): CcipSendCall__Outputs {
    return new CcipSendCall__Outputs(this);
  }
}

export class CcipSendCall__Inputs {
  _call: CcipSendCall;

  constructor(call: CcipSendCall) {
    this._call = call;
  }

  get destinationChainSelector(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get message(): CcipSendCallMessageStruct {
    return changetype<CcipSendCallMessageStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class CcipSendCall__Outputs {
  _call: CcipSendCall;

  constructor(call: CcipSendCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CcipSendCallMessageStruct extends ethereum.Tuple {
  get receiver(): Bytes {
    return this[0].toBytes();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }

  get tokenAmounts(): Array<CcipSendCallMessageTokenAmountsStruct> {
    return this[2].toTupleArray<CcipSendCallMessageTokenAmountsStruct>();
  }

  get feeToken(): Address {
    return this[3].toAddress();
  }

  get extraArgs(): Bytes {
    return this[4].toBytes();
  }
}

export class CcipSendCallMessageTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class RecoverTokensCall extends ethereum.Call {
  get inputs(): RecoverTokensCall__Inputs {
    return new RecoverTokensCall__Inputs(this);
  }

  get outputs(): RecoverTokensCall__Outputs {
    return new RecoverTokensCall__Outputs(this);
  }
}

export class RecoverTokensCall__Inputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RecoverTokensCall__Outputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }
}

export class RouteMessageCall extends ethereum.Call {
  get inputs(): RouteMessageCall__Inputs {
    return new RouteMessageCall__Inputs(this);
  }

  get outputs(): RouteMessageCall__Outputs {
    return new RouteMessageCall__Outputs(this);
  }
}

export class RouteMessageCall__Inputs {
  _call: RouteMessageCall;

  constructor(call: RouteMessageCall) {
    this._call = call;
  }

  get message(): RouteMessageCallMessageStruct {
    return changetype<RouteMessageCallMessageStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get gasForCallExactCheck(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RouteMessageCall__Outputs {
  _call: RouteMessageCall;

  constructor(call: RouteMessageCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get retData(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }

  get gasUsed(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RouteMessageCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<RouteMessageCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<RouteMessageCallMessageDestTokenAmountsStruct>();
  }
}

export class RouteMessageCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetWrappedNativeCall extends ethereum.Call {
  get inputs(): SetWrappedNativeCall__Inputs {
    return new SetWrappedNativeCall__Inputs(this);
  }

  get outputs(): SetWrappedNativeCall__Outputs {
    return new SetWrappedNativeCall__Outputs(this);
  }
}

export class SetWrappedNativeCall__Inputs {
  _call: SetWrappedNativeCall;

  constructor(call: SetWrappedNativeCall) {
    this._call = call;
  }

  get wrappedNative(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWrappedNativeCall__Outputs {
  _call: SetWrappedNativeCall;

  constructor(call: SetWrappedNativeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
