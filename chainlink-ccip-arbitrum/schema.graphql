type Message @entity(immutable: true) {
  id: Bytes! # messageId - bytes32
  sourceChainSelector: BigInt! # uint64
  offRampAddress: Bytes! # address
  calldataHash: Bytes! # bytes32
  blockNumberReceived: BigInt!
  blockTimestampReceived: BigInt!
  transactionHash: Bytes!
}

# the router contract can have multiple offRamps
type OffRamp @entity {
  id: Bytes! # address - offRamp
  name: String! # name of the offRamp
  isActive: Boolean! # is the offRamp active?
  sourceChainSelector: BigInt! # uint64
  supportedTokens: [Bytes!]! # array of addresses of destination tokens
  typeAndVersion: String! # type and version of the offRamp
  blockNumberModified: BigInt!
  blockTimestampModified: BigInt!
  transactionHashLastModified: Bytes!
}

# the router contract can only have one onRamp (EVM2EVM onRamp contract) - Doesn't have a name since it can be any network
type OnRamp @entity(immutable: true) {
  id: Bytes! # address - onRamp
  destChainSelector: BigInt! # uint64
  typeAndVersion: String! # type and version of the onRamp
  blockNumberModified: BigInt!
  blockTimestampModified: BigInt!
  transactionHashLastModified: Bytes!
}
